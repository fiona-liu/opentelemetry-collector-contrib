// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for redisclientreceiver metrics.
type MetricsSettings struct {
	RedisClientOperationOpspersecond MetricSettings `mapstructure:"redis.client.operation.opspersecond"`
	RedisClientOperationP100latency  MetricSettings `mapstructure:"redis.client.operation.p100latency"`
	RedisClientOperationP50latency   MetricSettings `mapstructure:"redis.client.operation.p50latency"`
	RedisClientOperationP90latency   MetricSettings `mapstructure:"redis.client.operation.p90latency"`
	RedisClientOperationP95latency   MetricSettings `mapstructure:"redis.client.operation.p95latency"`
	RedisClientOperationP9999latency MetricSettings `mapstructure:"redis.client.operation.p99.99latency"`
	RedisClientOperationP999latency  MetricSettings `mapstructure:"redis.client.operation.p99.9latency"`
	RedisClientOperationP99latency   MetricSettings `mapstructure:"redis.client.operation.p99latency"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		RedisClientOperationOpspersecond: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP100latency: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP50latency: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP90latency: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP95latency: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP9999latency: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP999latency: MetricSettings{
			Enabled: true,
		},
		RedisClientOperationP99latency: MetricSettings{
			Enabled: true,
		},
	}
}

type metricRedisClientOperationOpspersecond struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.opspersecond metric with initial data.
func (m *metricRedisClientOperationOpspersecond) init() {
	m.data.SetName("redis.client.operation.opspersecond")
	m.data.SetDescription("The number of operations per second in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationOpspersecond) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationOpspersecond) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationOpspersecond) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationOpspersecond(settings MetricSettings) metricRedisClientOperationOpspersecond {
	m := metricRedisClientOperationOpspersecond{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP100latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p100latency metric with initial data.
func (m *metricRedisClientOperationP100latency) init() {
	m.data.SetName("redis.client.operation.p100latency")
	m.data.SetDescription("p100 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP100latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP100latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP100latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP100latency(settings MetricSettings) metricRedisClientOperationP100latency {
	m := metricRedisClientOperationP100latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP50latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p50latency metric with initial data.
func (m *metricRedisClientOperationP50latency) init() {
	m.data.SetName("redis.client.operation.p50latency")
	m.data.SetDescription("p50 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP50latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP50latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP50latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP50latency(settings MetricSettings) metricRedisClientOperationP50latency {
	m := metricRedisClientOperationP50latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP90latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p90latency metric with initial data.
func (m *metricRedisClientOperationP90latency) init() {
	m.data.SetName("redis.client.operation.p90latency")
	m.data.SetDescription("p90 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP90latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP90latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP90latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP90latency(settings MetricSettings) metricRedisClientOperationP90latency {
	m := metricRedisClientOperationP90latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP95latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p95latency metric with initial data.
func (m *metricRedisClientOperationP95latency) init() {
	m.data.SetName("redis.client.operation.p95latency")
	m.data.SetDescription("p95 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP95latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP95latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP95latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP95latency(settings MetricSettings) metricRedisClientOperationP95latency {
	m := metricRedisClientOperationP95latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP9999latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p99.99latency metric with initial data.
func (m *metricRedisClientOperationP9999latency) init() {
	m.data.SetName("redis.client.operation.p99.99latency")
	m.data.SetDescription("p99.99 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP9999latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP9999latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP9999latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP9999latency(settings MetricSettings) metricRedisClientOperationP9999latency {
	m := metricRedisClientOperationP9999latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP999latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p99.9latency metric with initial data.
func (m *metricRedisClientOperationP999latency) init() {
	m.data.SetName("redis.client.operation.p99.9latency")
	m.data.SetDescription("p99.90 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP999latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP999latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP999latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP999latency(settings MetricSettings) metricRedisClientOperationP999latency {
	m := metricRedisClientOperationP999latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientOperationP99latency struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.client.operation.p99latency metric with initial data.
func (m *metricRedisClientOperationP99latency) init() {
	m.data.SetName("redis.client.operation.p99latency")
	m.data.SetDescription("p99 latency based on activity in the last minute")
	m.data.SetUnit("")
	m.data.SetDataType(pdata.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisClientOperationP99latency) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, operationAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Operation, pdata.NewAttributeValueString(operationAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientOperationP99latency) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientOperationP99latency) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientOperationP99latency(settings MetricSettings) metricRedisClientOperationP99latency {
	m := metricRedisClientOperationP99latency{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                              pdata.Timestamp
	metricRedisClientOperationOpspersecond metricRedisClientOperationOpspersecond
	metricRedisClientOperationP100latency  metricRedisClientOperationP100latency
	metricRedisClientOperationP50latency   metricRedisClientOperationP50latency
	metricRedisClientOperationP90latency   metricRedisClientOperationP90latency
	metricRedisClientOperationP95latency   metricRedisClientOperationP95latency
	metricRedisClientOperationP9999latency metricRedisClientOperationP9999latency
	metricRedisClientOperationP999latency  metricRedisClientOperationP999latency
	metricRedisClientOperationP99latency   metricRedisClientOperationP99latency
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                              pdata.NewTimestampFromTime(time.Now()),
		metricRedisClientOperationOpspersecond: newMetricRedisClientOperationOpspersecond(settings.RedisClientOperationOpspersecond),
		metricRedisClientOperationP100latency:  newMetricRedisClientOperationP100latency(settings.RedisClientOperationP100latency),
		metricRedisClientOperationP50latency:   newMetricRedisClientOperationP50latency(settings.RedisClientOperationP50latency),
		metricRedisClientOperationP90latency:   newMetricRedisClientOperationP90latency(settings.RedisClientOperationP90latency),
		metricRedisClientOperationP95latency:   newMetricRedisClientOperationP95latency(settings.RedisClientOperationP95latency),
		metricRedisClientOperationP9999latency: newMetricRedisClientOperationP9999latency(settings.RedisClientOperationP9999latency),
		metricRedisClientOperationP999latency:  newMetricRedisClientOperationP999latency(settings.RedisClientOperationP999latency),
		metricRedisClientOperationP99latency:   newMetricRedisClientOperationP99latency(settings.RedisClientOperationP99latency),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// Emit appends generated metrics to a pdata.MetricsSlice and updates the internal state to be ready for recording
// another set of data points. This function will be doing all transformations required to produce metric representation
// defined in metadata and user settings, e.g. delta/cumulative translation.
func (mb *MetricsBuilder) Emit(metrics pdata.MetricSlice) {
	mb.metricRedisClientOperationOpspersecond.emit(metrics)
	mb.metricRedisClientOperationP100latency.emit(metrics)
	mb.metricRedisClientOperationP50latency.emit(metrics)
	mb.metricRedisClientOperationP90latency.emit(metrics)
	mb.metricRedisClientOperationP95latency.emit(metrics)
	mb.metricRedisClientOperationP9999latency.emit(metrics)
	mb.metricRedisClientOperationP999latency.emit(metrics)
	mb.metricRedisClientOperationP99latency.emit(metrics)
}

// RecordRedisClientOperationOpspersecondDataPoint adds a data point to redis.client.operation.opspersecond metric.
func (mb *MetricsBuilder) RecordRedisClientOperationOpspersecondDataPoint(ts pdata.Timestamp, val int64, operationAttributeValue string) {
	mb.metricRedisClientOperationOpspersecond.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP100latencyDataPoint adds a data point to redis.client.operation.p100latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP100latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP100latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP50latencyDataPoint adds a data point to redis.client.operation.p50latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP50latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP50latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP90latencyDataPoint adds a data point to redis.client.operation.p90latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP90latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP90latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP95latencyDataPoint adds a data point to redis.client.operation.p95latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP95latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP95latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP9999latencyDataPoint adds a data point to redis.client.operation.p99.99latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP9999latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP9999latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP999latencyDataPoint adds a data point to redis.client.operation.p99.9latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP999latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP999latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// RecordRedisClientOperationP99latencyDataPoint adds a data point to redis.client.operation.p99latency metric.
func (mb *MetricsBuilder) RecordRedisClientOperationP99latencyDataPoint(ts pdata.Timestamp, val float64, operationAttributeValue string) {
	mb.metricRedisClientOperationP99latency.recordDataPoint(mb.startTime, ts, val, operationAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pdata.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// Operation (Redis DB operation)
	Operation string
}{
	"operation",
}

// A is an alias for Attributes.
var A = Attributes
